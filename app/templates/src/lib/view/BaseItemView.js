// Generated by LiveScript 1.3.1
(function(){
  var _, Backbone, Marionette, Rivets, BaseItemView;
  _ = require('lodash');
  Backbone = require('backbone');
  Marionette = require('backbone.marionette');
  Rivets = require('rivets');
  BaseItemView = (function(superclass){
    var prototype = extend$((import$(BaseItemView, superclass).displayName = 'BaseItemView', BaseItemView), superclass).prototype, constructor = BaseItemView;
    prototype.initialize = function(){
      if (!this.viewModel) {
        this.viewModel = new Backbone.Model();
      }
    };
    prototype.onRender = function(){
      this.binding = Rivets.bind(this.el, _.result(this, 'bindingContext'));
    };
    prototype.onClose = function(){
      var ref$;
      if ((ref$ = this.binding) != null) {
        ref$.unbind();
      }
    };
    prototype.bindingContext = function(){
      return {
        model: this.model,
        view: this,
        viewModel: this.viewModel
      };
    };
    function BaseItemView(){
      this.bindingContext = bind$(this, 'bindingContext', prototype);
      this.onClose = bind$(this, 'onClose', prototype);
      this.onRender = bind$(this, 'onRender', prototype);
      this.initialize = bind$(this, 'initialize', prototype);
      BaseItemView.superclass.apply(this, arguments);
    }
    return BaseItemView;
  }(Marionette.ItemView));
  module.exports = BaseItemView;
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
